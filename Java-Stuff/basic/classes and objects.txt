let Dart be a Animal be class.

1) new Animal();
2) Animal  a;
3) a=new Animal();

in first statement,we are creating a Object of Animal,but we can only access it's methods at the time of
its declaration,eg: new Animal().eat() , we cant access the object later as we dont have it's address
stored anywhere.

in second statement,we are creating a refernce variable of type Animal,which means,it can refer to or store the
address of objects of type animals or the objects of other classes which have extended/implemented Animal.That
means animal can only point to objects of type Animal.
one more property of animal is that it can only access the methods which are defined in class Animal,it can't access
the one defined in child classes.



hashCode()

its returrns hashcode which is unique for a object,thus useful for D.S like Hashmaps.

if two variables points towards same objects,they both will have same hashcode.

-----------------------------------------------------------------------------------------------------
There are four different ways to create objects in java:

A. Using new keyword
This is the most common way to create an object in java. Almost 99% of objects are created in this way.

 MyObject object = new MyObject();

B. Using Class.forName()
If we know the name of the class & if it has a public default constructor we can create an object in this way.

MyObject object = (MyObject) Class.forName("subin.rnd.MyObject").newInstance();

C. Using clone()
The clone() can be used to create a copy of an existing object.

MyObject anotherObject = new MyObject();
MyObject object = (MyObject) anotherObject.clone();

D. Using object deserialization
Object deserialization is nothing but creating an object from its serialized form.

ObjectInputStream inStream = new ObjectInputStream(anInputStream );
MyObject object = (MyObject) inStream.readObject();